  In C#, a nested array refers to an array whose elements consist of other arrays. These multidimensional arrays allow us to organize and handle data efficiently. Based on your requirement, I'll describe three kinds of nested arrays: Rectangular, Jagged, and Variable Size Jagged Arrays.

**Rectangular Multidimensional Array:**
All rows must have the same column length.

```csharp
using System;

class Program
{
    static void Main()
    {
        int[,] nestedArray = new int[3, 2] {{1, 2}, {3, 4}, {5, 6}};

        for (int row = 0; row < nestedArray.GetLength(0); row++)
        {
            for (int col = 0; col < nestedArray.GetLength(1); col++)
            {
                Console.Write(nestedArray[row,col] + "\t");
            }
            Console.WriteLine();
        }
    }
}
```

Result:

```
1	2 
3	4 
5	6 
```

**Jagged Array:**
Rows can have varying lengths, making it ideal for storing lists with distinct sizes.

```csharp
using System;

class Program
{
    static void Main()
    {
        int[][] nestedArray = new int[3][];
        nestedArray[0] = new int[2]{1, 2};
        nestedArray[1] = new int[]{3, 4, 5};
        nestedArray[2] = new int[1]{6};

        for (int row = 0; row < nestedArray.Length; row++)
        {
            for (int col = 0; col < nestedArray[row].Length; col++)
            {
                Console.Write(nestedArray[row][col] + "\t");
            }
            Console.WriteLine();
        }
    }
}
```

Result:

```
1	2 
3	4	5 
6 
```

**Variable Size Jagged Array:**
Allow adding or removing columns dynamically.

```csharp
using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        List<List<int>> nestedArray = new List<List<int>>();
        nestedArray.Add(new List<int>());
        nestedArray[0].AddRange(new []{1, 2});
        nestedArray.Add(new List<int>{3, 4, 5});
        nestedArray[1].Add(6);

        foreach (var row in nestedArray)
        {
            foreach (var col in row)
            {
                Console.Write(col + "\t");
            }
            Console.WriteLine();
        }
    }
}
```

Result:

```
1	2 
3	4	5 
```

Choose the most suitable type depending on your project requirements, taking advantage of flexibility and ease of management offered by nested arrays.